apply plugin: 'com.novoda.bintray-release'

// This generates sources.jar
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.convention('sources')
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

// This generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.convention('javadoc')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
    }
}

afterEvaluate {
    Task bintrayUploadTask = tasks.findByName('bintrayUpload')
    Task uploadArchivesTask = tasks.findByName('uploadArchives')
    if (bintrayUploadTask != null && uploadArchivesTask != null) {
        bintrayUploadTask.dependsOn uploadArchivesTask
    }
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}
// load properties
Properties properties = new Properties()
File localPropertiesFile = project.file("$rootProject.projectDir.absolutePath/local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("project.properties");
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectName = properties.getProperty("project.name")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")
def projectDesc = properties.getProperty("project.desc")

def bintrayUserName = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")

project.publish {
    groupId = projectGroupId
    artifactId = projectArtifactId
    uploadName = projectName
    website = projectSiteUrl
    repository = projectGitUrl
    desc = projectDesc
    publishVersion = projectVersionName
    userOrg = bintrayUserName
    bintrayUser = bintrayUserName
    bintrayKey = bintrayApikey
    dryRun = true
}
